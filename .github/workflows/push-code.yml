name: Push a build artefact.

on:
  workflow_call:
    inputs:
      container:
        description: 'The docker image to use'
        type: string
        required: true
      git_name:
        description: 'The git committer name'
        type: string
        required: true
      git_email:
        description: 'The git committer email'
        type: string
        required: true
      source_key:
        description: 'The source cache key suffix, or empty to checkout'
        type: string
      add_files:
        description: 'The files/directories to add, bypassing .gitignore'
        type: string
    secrets:
      ARTEFACT_REPO:
        description: 'URL of the artefact repo.'
        required: true
      ARTEFACT_SSH_KEY:
        description: 'Private SSH key authorised to push to the artefact repo'
        required: true
      SSH_CONFIG:
        description: 'SSH configuration'
        required: true
      KNOWN_HOSTS:
        description: 'SSH known hosts'
        required: true

defaults:
  run:
    shell: bash

jobs:
  push-code:
    name: 'Push artefact to repo'
    runs-on: ubuntu-latest
    container: ${{ inputs.container }}
    env:
      COMMIT_MSG: ${{ github.event.head_commit.message }}
      COMMIT_SHA: ${{ github.sha }}
      COMMIT_REF: ${{ github.event.ref }}
      DRY_RUN: ${{ inputs.dry_run == 'true' && '--dry-run' || '' }}
      GIT_AUTHOR_NAME: ${{ inputs.git_name }}
      GIT_AUTHOR_EMAIL: ${{ inputs.git_email }}
      GIT_COMMITTER_NAME: ${{ inputs.git_name }}
      GIT_COMMITTER_EMAIL: ${{ inputs.git_email }}
    steps:
      - name: Restore build from a previous step.
        uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          # We are only interested in a direct hit.
          key: build-${{ github.sha }}-${{ inputs.source_key }}

      - name: Abort if we have a source build cache miss.
        run: exit 1
        if: steps.restore-build.outputs.cache-hit != 'true'

      - name: Get commit details for pull requests.
        if: startsWith(github.ref, 'refs/pull/')
        env:
          COMMIT_BRANCH: ${{ github.head_ref }}
        run: |
          echo "COMMIT_SHA=`git log -1 --pretty=format:"%s" | cut -d' ' -f2`" >> $GITHUB_ENV
          echo "COMMIT_REF=refs/heads/$COMMIT_BRANCH" >> $GITHUB_ENV
          echo "COMMIT_MSG=`curl -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_BRANCH | grep '"message":' | grep -oE ': ".*",' | cut -c4- | rev | cut -c3- | rev`" >> $GITHUB_ENV

      - name: Set up the SSH key and configuration.
        uses: shimataro/ssh-key-action@v2.3.1
        with:
          key: ${{ secrets.ARTEFACT_SSH_KEY }}
          config: ${{ secrets.SSH_CONFIG }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Add & fetch the artefact repo.
        run: |
          git remote add artefact ${{ secrets.ARTEFACT_REPO }}
          git fetch artefact

      - name: Checkout artefact branch without changing local files.
        if: startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/pull/')
        # Include an unshallow fetch of origin so that we have history. At some
        # replace this with trying to build on top of the parent when there
        # isn't a previous build in the same branch.
        run: |
          git fetch --unshallow origin
          git checkout -b ${COMMIT_REF:11}-build
          git reset --soft artefact/${COMMIT_REF:11}-build || true

      - name: Add the build files.
        run: git add -f ${{ inputs.add_files }}

      - name: Deploy the artifact for branches/pulls
        if: startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/pull/')
        run: |
          git commit --allow-empty -m "[BUILD ${COMMIT_SHA:0:7}] $COMMIT_MSG"
          git push artefact HEAD
          echo "🏗 Branch ${COMMIT_REF:11}-build pushed!" >> $GITHUB_STEP_SUMMARY

      - name: Deploy the artifact for tags
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          git commit --allow-empty -m "[BUILD ${COMMIT_SHA:0:7}] Tag ${COMMIT_REF:10}"
          git tag ${COMMIT_REF:10}-build
          git push artefact ${COMMIT_REF:10}-build
          echo "🏗 Tag ${COMMIT_REF:10}-build pushed!" >> $GITHUB_STEP_SUMMARY
