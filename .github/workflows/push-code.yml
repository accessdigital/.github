name: Push a build artefact.

on:
  workflow_call:
    inputs:
      container:
        description: 'The docker image to use'
        type: string
        required: true
      git_name:
        description: 'The git committer name'
        type: string
        required: true
      git_email:
        description: 'The git committer email'
        type: string
        required: true
      source_key:
        description: 'The source cache key suffix, or empty to checkout'
        type: string
      add_files:
        description: 'The files/directories to add, bypassing .gitignore'
        type: string
    secrets:
      ARTEFACT_REPO:
        description: 'URL of the artefact repo.'
        required: true
      ARTEFACT_SSH_KEY:
        description: 'Private SSH key authorised to push to the artefact repo'
        required: true
      SSH_CONFIG:
        description: 'SSH configuration'
        required: true
      KNOWN_HOSTS:
        description: 'SSH known hosts'
        required: true
      GITHUB_ACCESS_TOKEN:
        description: 'The github token, required for the unshallow fetch'
        required: true

defaults:
  run:
    shell: bash

jobs:
  push-code:
    name: 'Push artefact to repo'
    runs-on: ubuntu-latest
    container: ${{ inputs.container }}
    env:
      SOURCE_MSG: ${{ github.event.head_commit.message }}
      SOURCE_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
      SOURCE_BRANCH_PUSH_FQ: ${{ startsWith(github.ref, '/refs/tags/') && github.event.base_ref || github.ref }}
      SOURCE_TAG_FQ: ${{ github.ref }}
      TARGET_SHA: ${{ github.event.pull_request.base.sha }}
      TARGET_BRANCH_PUSH_FQ: ${{ github.event.base_ref }}
      DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
      DRY_RUN: ${{ inputs.dry_run == 'true' && '--dry-run' || '' }}
      GIT_AUTHOR_NAME: ${{ inputs.git_name }}
      GIT_AUTHOR_EMAIL: ${{ inputs.git_email }}
      GIT_COMMITTER_NAME: ${{ inputs.git_name }}
      GIT_COMMITTER_EMAIL: ${{ inputs.git_email }}
    steps:
      - name: Disable git safe directories as we are in a container.
        run: git config --global --add safe.directory '*'

      - name: Restore build from a previous step.
        uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          # We are only interested in a direct hit.
          key: build-${{ github.sha }}-${{ inputs.source_key }}

      - name: Abort if we have a source build cache miss.
        run: exit 1
        if: steps.restore-build.outputs.cache-hit != 'true'

      - name: Set up commit vars.
        env:
          SOURCE_SHA_SHORT: ${SOURCE_SHA:0:7}
          TARGET_SHA_SHORT: ${TARGET_SHA:0:7}
          SOURCE_BRANCH_PUSH: ${SOURCE_BRANCH_PUSH_FQ:11}
          TARGET_BRANCH_PUSH: ${TARGET_BRANCH_PUSH_FQ:11}
        run: |
          echo "SOURCE_TAG=${SOURCE_SHA:0:7}" >> $GITHUB_ENV
          echo "SOURCE_BRANCH=${{ github.head_ref || env.SOURCE_BRANCH_PUSH }}" >> $GITHUB_ENV
          echo "SOURCE_TAG=${SOURCE_TAG_FQ:10}" >> $GITHUB_ENV
          echo "TARGET_BRANCH=${{ github.base_ref || env.TARGET_BRANCH_PUSH }}" >> $GITHUB_ENV
          echo "BUILD_REF=${{ github.event_name == 'pull_request' && format('{0} / {1}', env.SOURCE_SHA_SHORT, env.TARGET_SHA_SHORT) || env.SOURCE_SHA_SHORT }}" >> $GITHUB_ENV
          
      - name: Get commit message for pull requests.
        if: startsWith(github.ref, 'refs/pull/')
        env:
          COMMIT_BRANCH: ${{ github.head_ref }}
        run: |
          echo "COMMIT_MSG=`curl -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_BRANCH | grep '"message":' | grep -oE ': ".*",' | cut -c4- | rev | cut -c3- | rev`" >> $GITHUB_ENV

      - name: Set up the SSH key and configuration.
        uses: shimataro/ssh-key-action@v2.3.1
        with:
          key: ${{ secrets.ARTEFACT_SSH_KEY }}
          config: ${{ secrets.SSH_CONFIG }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Add & fetch the artefact repo.
        run: |
          git remote add artefact ${{ secrets.ARTEFACT_REPO }}
          git fetch artefact

      - name: Checkout artefact branch without changing local files.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_ACCESS_TOKEN }}
        # Include an unshallow fetch of origin so that we have history. At some
        # replace this with trying to build on top of the parent when there
        # isn't a previous build in the same branch.
        run: |
          git remote set-url origin $(git remote get-url origin | sed 's#https://#https://${{ secrets.GITHUB_TOKEN }}:${{ secrets.GITHUB_TOKEN }}@#')
          git fetch --unshallow origin
          git checkout -b ${SOURCE_BRANCH}-build
          git reset --soft artefact/${SOURCE_BRANCH}-build || git reset --soft artefact/${TARGET_BRANCH}-build || git reset --soft artefact/${DEFAULT_BRANCH}-build

      - name: Add the build files.
        run: git add -f ${{ inputs.add_files }}

      - name: Deploy the artifact for branches/pulls
        if: startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/pull/')
        run: |
          git commit --allow-empty -m "[BUILD $BUILD_REF] $SOURCE_MSG"
          git push artefact HEAD:refs/heads/$SOURCE_BRANCH-build --force
          echo "🏗 Branch ${SOURCE_BRANCH}-build pushed!" >> $GITHUB_STEP_SUMMARY

      - name: Deploy the artifact for tags
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          git commit --allow-empty -m "[BUILD ${SOURCE_TAG} / $BUILD_REF] $SOURCE_MSG"
          git push artefact HEAD:refs/heads/${SOURCE_TAG}-tag-build --force
          git tag ${SOURCE_TAG}-build
          git push artefact ${SOURCE_TAG}-build
          echo "🏗 Tag ${SOURCE_TAG}-build pushed!" >> $GITHUB_STEP_SUMMARY
